# tools to handle XML files
from Bio.Blast import NCBIXML # Import Biopythonâ€™s BLAST XML parser
import pandas as pd
import glob # Import glob from the Python standard library

def extract_blast_info_local(blast_xml_file, output_excel_file):
    """
    Extracts BLAST results from a local XML output file and writes selected information to an Excel file.

    This function uses only the data contained in the BLAST XML output file generated by a local BLAST run.
    Online queries to NCBI (used to fetch GenBank record details such as organism, taxonomy,
    genbank_sequence_length, submission_date, and references) are omitted in this version.

    The extracted fields include:
      - query_id: The ID or description of the query sequence.
      - query_length: The number of nucleotides in the query.
      - hit_accession: The accession number of the top BLAST hit.
      - hit_def: The full definition (description) of the top hit.
      - e_value: The expect value of the top alignment.
      - bit_score: The bit score of the top alignment.
      - alignment_length: The length of the aligned region.
      - identities: The number of identical positions in the alignment.
      - percent_identity: The percentage of identities in the alignment.
      - query_coverage: The percentage of the query sequence covered by the alignment.

    The following fields are not available from the local BLAST XML and are marked as "Not Available":
      - organism
      - taxonomy
      - genbank_sequence_length
      - submission_date
      - references

    Parameters:
      blast_xml_file (str): Path to the BLAST XML output file.
      output_excel_file (str): Name of the Excel file to save the results.
    """

    results = []  # List to hold results for each query

    # Open and parse the BLAST XML output file
    with open(blast_xml_file) as result_handle:
        blast_records = list(NCBIXML.parse(result_handle))

    # Loop over each BLAST record (each query)
    for record in blast_records:
        # Get query-level information
        query_id = record.query_id if hasattr(record, "query_id") else record.query
        query_length = record.query_letters

        # Skip record if no hits found (or you may want to store NA values)
        if not record.alignments:
            continue

        # Extract information from the top hit (first alignment) and its first HSP
        top_alignment = record.alignments[0]
        top_hsp = top_alignment.hsps[0]

        hit_accession = top_alignment.accession
        hit_def = top_alignment.hit_def
        e_value = top_hsp.expect
        bit_score = top_hsp.bits
        alignment_length = top_hsp.align_length
        identities = top_hsp.identities
        percent_identity = (identities / alignment_length * 100) if alignment_length > 0 else 0.0
        query_coverage = (alignment_length / query_length * 100) if query_length > 0 else 0.0

        # Instead of fetching GenBank data (which requires online requests), mark these as "Not Available"
        organism = "Not Available"
        taxonomy = "Not Available"
        genbank_sequence_length = "Not Available"
        submission_date = "Not Available"
        references = "Not Available"

        # Append the results for this query
        results.append({
            "query_id": query_id,
            "query_length": query_length,
            "hit_accession": hit_accession,
            "hit_def": hit_def,
            "e_value": e_value,
            "bit_score": bit_score,
            "alignment_length": alignment_length,
            "identities": identities,
            "percent_identity": percent_identity,
            "query_coverage": query_coverage,
            "organism": organism,
            "taxonomy": taxonomy,
            "genbank_sequence_length": genbank_sequence_length,
            "submission_date": submission_date,
            "references": references
        })

    # Convert the list of results into a Pandas DataFrame
    blast_results = pd.DataFrame(results)

    # Write the DataFrame to an Excel file
    blast_results.to_excel(output_excel_file, index=False)

    print(f"\nResults of {blast_xml_file} successfully saved to {output_excel_file}")


# Use glob to gather all XML files in the specified directory.
# This searches for all files ending with '.xml' in the folder.
xml_files = glob.glob("path/to/your/xml_files/*.xml")

for xml_file in xml_files:
    extract_blast_info_local(blast_xml_file=xml_file, output_excel_file="sequence_analysis_with_blast.xlsx")